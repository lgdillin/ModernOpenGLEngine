#version 330

layout (triangles) in;
layout (triangle_strip, max_vertices=18) out;

uniform mat4 lightMatrices[6]; // cubemap 

out vec4 fragPosition;

void main() {
	for(int face = 0; face < 6; ++face) {

		// So by saying which gl_Layer (built in GLSL term) we are using,
		// its defining which of those 6 textures now bound to our framebuffer
		// we want to output to
		// (Recall the 6 textures generated by glTexImage2D() in our 
		// OmniShadowMap class)
		// so we are currently drawing to the texture designated by 'face'
		gl_Layer = face;

		// now we want to go through each of the vertices in the triangle 
		// which is passed in (rem: triangles as an in var)
		for(int i = 0; i < 3; ++i) {
			fragPosition = gl_in[i].gl_Position;

			// now we need the position which we actually want to emit 
			gl_Position = lightMatrices[face] * fragPosition;
			
			// Emits a vertex at gl_Position, at gl_Layer = face
			EmitVertex();
		}

		// End writing to the triangle, move to the next one 
		EndPrimitive(); 
	}
}